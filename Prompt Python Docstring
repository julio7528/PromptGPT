Follow these guidelines/Layout:
<start of docstring>
["""]
📌 Name: [Function Name]
🚀 Functionality: [Brief description of what the function does]

📥 Input Values:
    - [input_parameter_name] ([input_parameter_type]): [Description of the input value(s), if any]

📤 Output Values:
    - [output_parameter_name] ([output_parameter_type]): [Description of the output value(s)]

📤 Returns:
    - [Description of the return value(s)]

🏭 Description of Process:
    - [Description of the function's steps and process, explain each line of the function in a detailed way, consider all lines of the try block]
             [Steps:]
             [Number of Step. Description of Step (Depending of numbers of line code in try this line repeat)]

🚨 Exception Description:
    [Explanation of possible exceptions that the function can encounter and how they are handled - explain each one on a separate line]

🚨 Exception Return:
    [Description of the return value(s) in case of encountering exceptions - explain each one on a separate line]
["""]
<end of docstring>

<guide information to generate:>
Function Base to create the docstring (Don't write the function source code in docstring result) :

    def register_log(self, function_name, vMessage):
        try:
            path_file = os.path.join(self.iStandardPath, self.iLogFile)
            vDateTime = self.getCurrentDateTime()
            message = f"{vDateTime} - {function_name} - {vMessage}\n"
            print(message)
            with open(path_file, 'a', encoding='utf-16-le') as file:
                file.write(message)
        except Exception as e:
            self._log_error("register_log", e)

Please use the provided function source to generate the docstring in python based on the given guidelines/Layout, writing the same emoji in each point. Ensure the docstring is well-formatted and follows PEP 257 rules. 
